
008GPIO_Driver_with_ArrayOfPointers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002cc  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08000474  08000474  00010474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080004d4  080004d4  000104dc  2**0
                  CONTENTS
  4 .ARM          00000000  080004d4  080004d4  000104dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004d4  080004dc  000104dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004d4  080004d4  000104d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004d8  080004d8  000104d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000104dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000104dc  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000104dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000014e1  00000000  00000000  00010506  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000299  00000000  00000000  000119e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000068  00000000  00000000  00011c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000040  00000000  00000000  00011ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002326  00000000  00000000  00011d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000c94  00000000  00000000  0001404e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009630  00000000  00000000  00014ce2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0001e312  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000094  00000000  00000000  0001e364  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	0800045c 	.word	0x0800045c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	0800045c 	.word	0x0800045c

080001e8 <delay>:
/*
 * Note!! to not let high application files access the register by array of pointers use "static" keyword
 * Example: volatile RCC_AHB1ENR_Register *const RCC_Port_AHB1ClockEnable_Registers[Port_Indices]
 */

void delay(void){ // if delay is static, don't declare it in GPIO.h, and include GPIO.C in main.c
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
		int i;
		for (i=0; i<300000;i++);
 80001ee:	2300      	movs	r3, #0
 80001f0:	607b      	str	r3, [r7, #4]
 80001f2:	e002      	b.n	80001fa <delay+0x12>
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	3301      	adds	r3, #1
 80001f8:	607b      	str	r3, [r7, #4]
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4a04      	ldr	r2, [pc, #16]	; (8000210 <delay+0x28>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	ddf8      	ble.n	80001f4 <delay+0xc>
	}
 8000202:	bf00      	nop
 8000204:	bf00      	nop
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	bc80      	pop	{r7}
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	000493df 	.word	0x000493df

08000214 <main>:
#include <stdint.h>
#include <stdio.h>
#include "GPIO.h"

int main(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b086      	sub	sp, #24
 8000218:	af00      	add	r7, sp, #0
	// if array of pointers are static , you need to include GPIO.c
	// and if you remove static, include GPIO.h only, and extern them from GPIO.h
	// RCC_Port_AHB1ClockEnable_Registers[PortA]->Register=0x1;
	RCC_Port_ClockConfig_Register[0]->bits.MCO1= 0x01;
 800021a:	4b64      	ldr	r3, [pc, #400]	; (80003ac <main+0x198>)
 800021c:	681a      	ldr	r2, [r3, #0]
 800021e:	6813      	ldr	r3, [r2, #0]
 8000220:	2101      	movs	r1, #1
 8000222:	f361 5356 	bfi	r3, r1, #21, #2
 8000226:	6013      	str	r3, [r2, #0]
	RCC_Port_ClockConfig_Register[0]->bits.MCO1= 0x00;
 8000228:	4b60      	ldr	r3, [pc, #384]	; (80003ac <main+0x198>)
 800022a:	681a      	ldr	r2, [r3, #0]
 800022c:	6813      	ldr	r3, [r2, #0]
 800022e:	f36f 5356 	bfc	r3, #21, #2
 8000232:	6013      	str	r3, [r2, #0]

	// access the pointer register
	volatile RCC_CR_Register *RccControlRegister = (volatile RCC_CR_Register*) RCC_ClockControl;
 8000234:	4b5e      	ldr	r3, [pc, #376]	; (80003b0 <main+0x19c>)
 8000236:	613b      	str	r3, [r7, #16]
	RccControlRegister->bits.HSION=1;
 8000238:	693a      	ldr	r2, [r7, #16]
 800023a:	6813      	ldr	r3, [r2, #0]
 800023c:	f043 0301 	orr.w	r3, r3, #1
 8000240:	6013      	str	r3, [r2, #0]

	volatile RCC_AHB1ENR_Register *portDClockEnableRegister = RCC_Port_AHB1ClockEnable_Registers[PortD];
 8000242:	4b5c      	ldr	r3, [pc, #368]	; (80003b4 <main+0x1a0>)
 8000244:	68db      	ldr	r3, [r3, #12]
 8000246:	60fb      	str	r3, [r7, #12]
	volatile GPIO_MODER_Register *portDModeSelectRegister = GPIO_ModeSelect_Registers[PortD];
 8000248:	4b5b      	ldr	r3, [pc, #364]	; (80003b8 <main+0x1a4>)
 800024a:	68db      	ldr	r3, [r3, #12]
 800024c:	60bb      	str	r3, [r7, #8]
	volatile GPIO_ODR_Register *portDODRControlRegister = GPIO_ODRControl_Registers[PortD];
 800024e:	4b5b      	ldr	r3, [pc, #364]	; (80003bc <main+0x1a8>)
 8000250:	68db      	ldr	r3, [r3, #12]
 8000252:	607b      	str	r3, [r7, #4]

	portDClockEnableRegister->bits.GPIODEN=0x1;
 8000254:	68fa      	ldr	r2, [r7, #12]
 8000256:	6813      	ldr	r3, [r2, #0]
 8000258:	f043 0308 	orr.w	r3, r3, #8
 800025c:	6013      	str	r3, [r2, #0]

	portDModeSelectRegister->bits.MODER12 = 0x0;
 800025e:	68ba      	ldr	r2, [r7, #8]
 8000260:	6813      	ldr	r3, [r2, #0]
 8000262:	f36f 6319 	bfc	r3, #24, #2
 8000266:	6013      	str	r3, [r2, #0]
	portDModeSelectRegister->bits.MODER12 = 0x1;
 8000268:	68ba      	ldr	r2, [r7, #8]
 800026a:	6813      	ldr	r3, [r2, #0]
 800026c:	2101      	movs	r1, #1
 800026e:	f361 6319 	bfi	r3, r1, #24, #2
 8000272:	6013      	str	r3, [r2, #0]

	portDModeSelectRegister->bits.MODER13= 0x0;
 8000274:	68ba      	ldr	r2, [r7, #8]
 8000276:	6813      	ldr	r3, [r2, #0]
 8000278:	f36f 639b 	bfc	r3, #26, #2
 800027c:	6013      	str	r3, [r2, #0]
	portDModeSelectRegister->bits.MODER13= 0x1;
 800027e:	68ba      	ldr	r2, [r7, #8]
 8000280:	6813      	ldr	r3, [r2, #0]
 8000282:	2101      	movs	r1, #1
 8000284:	f361 639b 	bfi	r3, r1, #26, #2
 8000288:	6013      	str	r3, [r2, #0]

	portDModeSelectRegister->bits.MODER14= 0x0;
 800028a:	68ba      	ldr	r2, [r7, #8]
 800028c:	6813      	ldr	r3, [r2, #0]
 800028e:	f36f 731d 	bfc	r3, #28, #2
 8000292:	6013      	str	r3, [r2, #0]
	portDModeSelectRegister->bits.MODER14= 0x1;
 8000294:	68ba      	ldr	r2, [r7, #8]
 8000296:	6813      	ldr	r3, [r2, #0]
 8000298:	2101      	movs	r1, #1
 800029a:	f361 731d 	bfi	r3, r1, #28, #2
 800029e:	6013      	str	r3, [r2, #0]

	portDModeSelectRegister->bits.MODER15= 0x0;
 80002a0:	68ba      	ldr	r2, [r7, #8]
 80002a2:	6813      	ldr	r3, [r2, #0]
 80002a4:	f36f 739f 	bfc	r3, #30, #2
 80002a8:	6013      	str	r3, [r2, #0]
	portDModeSelectRegister->bits.MODER15= 0x1;
 80002aa:	68ba      	ldr	r2, [r7, #8]
 80002ac:	6813      	ldr	r3, [r2, #0]
 80002ae:	2101      	movs	r1, #1
 80002b0:	f361 739f 	bfi	r3, r1, #30, #2
 80002b4:	6013      	str	r3, [r2, #0]

	while(1){
		int i;
		for(i=0;i<2;i++){
 80002b6:	2300      	movs	r3, #0
 80002b8:	617b      	str	r3, [r7, #20]
 80002ba:	e03e      	b.n	800033a <main+0x126>
		delay();
 80002bc:	f7ff ff94 	bl	80001e8 <delay>
		portDODRControlRegister->bits.ODR12^= 0x1;
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80002c8:	b2db      	uxtb	r3, r3
 80002ca:	f083 0301 	eor.w	r3, r3, #1
 80002ce:	b2d9      	uxtb	r1, r3
 80002d0:	687a      	ldr	r2, [r7, #4]
 80002d2:	6813      	ldr	r3, [r2, #0]
 80002d4:	f361 330c 	bfi	r3, r1, #12, #1
 80002d8:	6013      	str	r3, [r2, #0]
		delay();
 80002da:	f7ff ff85 	bl	80001e8 <delay>
		portDODRControlRegister->bits.ODR13^= 0x1;
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	f3c3 3340 	ubfx	r3, r3, #13, #1
 80002e6:	b2db      	uxtb	r3, r3
 80002e8:	f083 0301 	eor.w	r3, r3, #1
 80002ec:	b2d9      	uxtb	r1, r3
 80002ee:	687a      	ldr	r2, [r7, #4]
 80002f0:	6813      	ldr	r3, [r2, #0]
 80002f2:	f361 334d 	bfi	r3, r1, #13, #1
 80002f6:	6013      	str	r3, [r2, #0]
		delay();
 80002f8:	f7ff ff76 	bl	80001e8 <delay>
		portDODRControlRegister->bits.ODR14^= 0x1;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	f3c3 3380 	ubfx	r3, r3, #14, #1
 8000304:	b2db      	uxtb	r3, r3
 8000306:	f083 0301 	eor.w	r3, r3, #1
 800030a:	b2d9      	uxtb	r1, r3
 800030c:	687a      	ldr	r2, [r7, #4]
 800030e:	6813      	ldr	r3, [r2, #0]
 8000310:	f361 338e 	bfi	r3, r1, #14, #1
 8000314:	6013      	str	r3, [r2, #0]
		delay();
 8000316:	f7ff ff67 	bl	80001e8 <delay>
		portDODRControlRegister->bits.ODR15^= 0x1;
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8000322:	b2db      	uxtb	r3, r3
 8000324:	f083 0301 	eor.w	r3, r3, #1
 8000328:	b2d9      	uxtb	r1, r3
 800032a:	687a      	ldr	r2, [r7, #4]
 800032c:	6813      	ldr	r3, [r2, #0]
 800032e:	f361 33cf 	bfi	r3, r1, #15, #1
 8000332:	6013      	str	r3, [r2, #0]
		for(i=0;i<2;i++){
 8000334:	697b      	ldr	r3, [r7, #20]
 8000336:	3301      	adds	r3, #1
 8000338:	617b      	str	r3, [r7, #20]
 800033a:	697b      	ldr	r3, [r7, #20]
 800033c:	2b01      	cmp	r3, #1
 800033e:	ddbd      	ble.n	80002bc <main+0xa8>
		}

		for(i=0;i<2;i++){
 8000340:	2300      	movs	r3, #0
 8000342:	617b      	str	r3, [r7, #20]
 8000344:	e02e      	b.n	80003a4 <main+0x190>
		delay();
 8000346:	f7ff ff4f 	bl	80001e8 <delay>
		portDODRControlRegister->bits.ODR12= 0x0;
 800034a:	687a      	ldr	r2, [r7, #4]
 800034c:	6813      	ldr	r3, [r2, #0]
 800034e:	f36f 330c 	bfc	r3, #12, #1
 8000352:	6013      	str	r3, [r2, #0]
		portDODRControlRegister->bits.ODR13= 0x0;
 8000354:	687a      	ldr	r2, [r7, #4]
 8000356:	6813      	ldr	r3, [r2, #0]
 8000358:	f36f 334d 	bfc	r3, #13, #1
 800035c:	6013      	str	r3, [r2, #0]
		portDODRControlRegister->bits.ODR14= 0x0;
 800035e:	687a      	ldr	r2, [r7, #4]
 8000360:	6813      	ldr	r3, [r2, #0]
 8000362:	f36f 338e 	bfc	r3, #14, #1
 8000366:	6013      	str	r3, [r2, #0]
		portDODRControlRegister->bits.ODR15= 0x0;
 8000368:	687a      	ldr	r2, [r7, #4]
 800036a:	6813      	ldr	r3, [r2, #0]
 800036c:	f36f 33cf 	bfc	r3, #15, #1
 8000370:	6013      	str	r3, [r2, #0]
		delay();
 8000372:	f7ff ff39 	bl	80001e8 <delay>
		portDODRControlRegister->bits.ODR12= 0x1;
 8000376:	687a      	ldr	r2, [r7, #4]
 8000378:	6813      	ldr	r3, [r2, #0]
 800037a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800037e:	6013      	str	r3, [r2, #0]
		portDODRControlRegister->bits.ODR13= 0x1;
 8000380:	687a      	ldr	r2, [r7, #4]
 8000382:	6813      	ldr	r3, [r2, #0]
 8000384:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000388:	6013      	str	r3, [r2, #0]
		portDODRControlRegister->bits.ODR14= 0x1;
 800038a:	687a      	ldr	r2, [r7, #4]
 800038c:	6813      	ldr	r3, [r2, #0]
 800038e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000392:	6013      	str	r3, [r2, #0]
		portDODRControlRegister->bits.ODR15= 0x1;
 8000394:	687a      	ldr	r2, [r7, #4]
 8000396:	6813      	ldr	r3, [r2, #0]
 8000398:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800039c:	6013      	str	r3, [r2, #0]
		for(i=0;i<2;i++){
 800039e:	697b      	ldr	r3, [r7, #20]
 80003a0:	3301      	adds	r3, #1
 80003a2:	617b      	str	r3, [r7, #20]
 80003a4:	697b      	ldr	r3, [r7, #20]
 80003a6:	2b01      	cmp	r3, #1
 80003a8:	ddcd      	ble.n	8000346 <main+0x132>
	while(1){
 80003aa:	e784      	b.n	80002b6 <main+0xa2>
 80003ac:	080004bc 	.word	0x080004bc
 80003b0:	40023800 	.word	0x40023800
 80003b4:	080004a4 	.word	0x080004a4
 80003b8:	0800048c 	.word	0x0800048c
 80003bc:	08000474 	.word	0x08000474

080003c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003c0:	480d      	ldr	r0, [pc, #52]	; (80003f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003c2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003c4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003c8:	480c      	ldr	r0, [pc, #48]	; (80003fc <LoopForever+0x6>)
  ldr r1, =_edata
 80003ca:	490d      	ldr	r1, [pc, #52]	; (8000400 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003cc:	4a0d      	ldr	r2, [pc, #52]	; (8000404 <LoopForever+0xe>)
  movs r3, #0
 80003ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003d0:	e002      	b.n	80003d8 <LoopCopyDataInit>

080003d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003d6:	3304      	adds	r3, #4

080003d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003dc:	d3f9      	bcc.n	80003d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003de:	4a0a      	ldr	r2, [pc, #40]	; (8000408 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003e0:	4c0a      	ldr	r4, [pc, #40]	; (800040c <LoopForever+0x16>)
  movs r3, #0
 80003e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003e4:	e001      	b.n	80003ea <LoopFillZerobss>

080003e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003e8:	3204      	adds	r2, #4

080003ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003ec:	d3fb      	bcc.n	80003e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003ee:	f000 f811 	bl	8000414 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003f2:	f7ff ff0f 	bl	8000214 <main>

080003f6 <LoopForever>:

LoopForever:
  b LoopForever
 80003f6:	e7fe      	b.n	80003f6 <LoopForever>
  ldr   r0, =_estack
 80003f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000400:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000404:	080004dc 	.word	0x080004dc
  ldr r2, =_sbss
 8000408:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800040c:	2000001c 	.word	0x2000001c

08000410 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000410:	e7fe      	b.n	8000410 <ADC_IRQHandler>
	...

08000414 <__libc_init_array>:
 8000414:	b570      	push	{r4, r5, r6, lr}
 8000416:	4d0d      	ldr	r5, [pc, #52]	; (800044c <__libc_init_array+0x38>)
 8000418:	4c0d      	ldr	r4, [pc, #52]	; (8000450 <__libc_init_array+0x3c>)
 800041a:	1b64      	subs	r4, r4, r5
 800041c:	10a4      	asrs	r4, r4, #2
 800041e:	2600      	movs	r6, #0
 8000420:	42a6      	cmp	r6, r4
 8000422:	d109      	bne.n	8000438 <__libc_init_array+0x24>
 8000424:	4d0b      	ldr	r5, [pc, #44]	; (8000454 <__libc_init_array+0x40>)
 8000426:	4c0c      	ldr	r4, [pc, #48]	; (8000458 <__libc_init_array+0x44>)
 8000428:	f000 f818 	bl	800045c <_init>
 800042c:	1b64      	subs	r4, r4, r5
 800042e:	10a4      	asrs	r4, r4, #2
 8000430:	2600      	movs	r6, #0
 8000432:	42a6      	cmp	r6, r4
 8000434:	d105      	bne.n	8000442 <__libc_init_array+0x2e>
 8000436:	bd70      	pop	{r4, r5, r6, pc}
 8000438:	f855 3b04 	ldr.w	r3, [r5], #4
 800043c:	4798      	blx	r3
 800043e:	3601      	adds	r6, #1
 8000440:	e7ee      	b.n	8000420 <__libc_init_array+0xc>
 8000442:	f855 3b04 	ldr.w	r3, [r5], #4
 8000446:	4798      	blx	r3
 8000448:	3601      	adds	r6, #1
 800044a:	e7f2      	b.n	8000432 <__libc_init_array+0x1e>
 800044c:	080004d4 	.word	0x080004d4
 8000450:	080004d4 	.word	0x080004d4
 8000454:	080004d4 	.word	0x080004d4
 8000458:	080004d8 	.word	0x080004d8

0800045c <_init>:
 800045c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800045e:	bf00      	nop
 8000460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000462:	bc08      	pop	{r3}
 8000464:	469e      	mov	lr, r3
 8000466:	4770      	bx	lr

08000468 <_fini>:
 8000468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800046a:	bf00      	nop
 800046c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800046e:	bc08      	pop	{r3}
 8000470:	469e      	mov	lr, r3
 8000472:	4770      	bx	lr
