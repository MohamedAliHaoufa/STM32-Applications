/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stdio.h>
#include "GPIO.h"

int main(void)
{
	// if array of pointers are static , you need to include GPIO.c
	// and if you remove static, include GPIO.h only, and extern them from GPIO.h
	// RCC_Port_AHB1ClockEnable_Registers[PortA]->Register=0x1;
	RCC_Port_ClockConfig_Register[PortA]->bits.MCO1= 0x01;
	RCC_Port_ClockConfig_Register[PortA]->bits.MCO1= 0x00;

	// access the pointer register
	volatile RCC_CR_Register *RccControlRegister = (volatile RCC_CR_Register*) RCC_ClockControl;
	RccControlRegister->bits.HSION=1;

	volatile RCC_AHB1ENR_Register *portDClockEnableRegister = RCC_Port_AHB1ClockEnable_Registers[PortD];
	volatile GPIO_MODER_Register *portDModeSelectRegister = GPIO_ModeSelect_Registers[PortD];
	volatile GPIO_ODR_Register *portDODRControlRegister = GPIO_ODRControl_Registers[PortD];

	portDClockEnableRegister->bits.GPIODEN=0x1;

	portDModeSelectRegister->bits.MODER12 = 0x0;
	portDModeSelectRegister->bits.MODER12 = 0x1;

	portDModeSelectRegister->bits.MODER13= 0x0;
	portDModeSelectRegister->bits.MODER13= 0x1;

	portDModeSelectRegister->bits.MODER14= 0x0;
	portDModeSelectRegister->bits.MODER14= 0x1;

	portDModeSelectRegister->bits.MODER15= 0x0;
	portDModeSelectRegister->bits.MODER15= 0x1;

	while(1){
		int i;
		for(i=0;i<2;i++){
		delay();
		portDODRControlRegister->bits.ODR12^= 0x1;
		delay();
		portDODRControlRegister->bits.ODR13^= 0x1;
		delay();
		portDODRControlRegister->bits.ODR14^= 0x1;
		delay();
		portDODRControlRegister->bits.ODR15^= 0x1;
		}

		for(i=0;i<2;i++){
		delay();
		portDODRControlRegister->bits.ODR12= 0x0;
		portDODRControlRegister->bits.ODR13= 0x0;
		portDODRControlRegister->bits.ODR14= 0x0;
		portDODRControlRegister->bits.ODR15= 0x0;
		delay();
		portDODRControlRegister->bits.ODR12= 0x1;
		portDODRControlRegister->bits.ODR13= 0x1;
		portDODRControlRegister->bits.ODR14= 0x1;
		portDODRControlRegister->bits.ODR15= 0x1;
		}

	}
	/*while(1){

		if ((portAClockEnableRegister->bits.GPIOAEN) == 1 ){
			printf("GPIOAEN is 1 set\n");

		}else {
			printf("GPIOAEN is 0 clear\n");
		}
	}*/
}
