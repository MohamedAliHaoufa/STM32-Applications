/*
 * GPIO.c
 *
 *  Created on: Sep 16, 2023
 *      Author: mohamed
 */

#include "GPIO_reg.h"
#include "GPIO.h"

 /**************************************************************************************************************/
  /* creating an array of pointers to registers
   * the user (or the application layer) will not be allowed to have access to the hardware registers
   * because it's not his/her concern
   * he/she will only be allowed to call the interfacing functions in the GPIO.h file
   * for that reason a keyword  will be added
   *
   * A constant keyword is added because the location of the register never changes
   * so for safety no one can change the location of the pointer the only value that can be changed is the value INSIDE
   * the register ---> the value that the pointer is pointing to*/
 /**************************************************************************************************************/
volatile GPIO_IDR_Register *const GPIO_IDRControl_Registers[Port_Indices]={
		GPIO_PortA_IDRControl,
        GPIO_PortB_IDRControl,
        GPIO_PortC_IDRControl,
        GPIO_PortD_IDRControl,
        GPIO_PortE_IDRControl,
        GPIO_PortF_IDRControl
 };

volatile GPIO_ODR_Register *const GPIO_ODRControl_Registers[Port_Indices]={
		GPIO_PortA_ODRControl,
        GPIO_PortB_ODRControl,
        GPIO_PortC_ODRControl,
        GPIO_PortD_ODRControl,
        GPIO_PortE_ODRControl,
        GPIO_PortF_ODRControl
 };

volatile GPIO_MODER_Register *const GPIO_ModeSelect_Registers[Port_Indices]={
		GPIO_PortA_ModeSelect,
        GPIO_PortB_ModeSelect,
        GPIO_PortC_ModeSelect,
        GPIO_PortD_ModeSelect,
        GPIO_PortE_ModeSelect,
        GPIO_PortF_ModeSelect
 };

volatile GPIO_AFRL_Register *const GPIO_AlternateFunctionLowSelect_Registers[Port_Indices]={

		GPIO_PortA_AlternateFunctionLowSelect,
		GPIO_PortB_AlternateFunctionLowSelect,
        GPIO_PortC_AlternateFunctionLowSelect,
        GPIO_PortD_AlternateFunctionLowSelect,
        GPIO_PortE_AlternateFunctionLowSelect,
        GPIO_PortF_AlternateFunctionLowSelect
 };

volatile GPIO_AFRH_Register *const GPIO_AlternateFunctionHighSelect_Registers[Port_Indices]={
		GPIO_PortA_AlternateFunctionHighSelect,
        GPIO_PortB_AlternateFunctionHighSelect,
        GPIO_PortC_AlternateFunctionHighSelect,
        GPIO_PortD_AlternateFunctionHighSelect,
        GPIO_PortE_AlternateFunctionHighSelect,
        GPIO_PortF_AlternateFunctionHighSelect
 };
volatile RCC_AHB1ENR_Register *const RCC_Port_AHB1ClockEnable_Registers[Port_Indices]={

		RCC_PortA_AHB1ClockEnable,
		RCC_PortB_AHB1ClockEnable,
		RCC_PortC_AHB1ClockEnable,
		RCC_PortD_AHB1ClockEnable,
		RCC_PortE_AHB1ClockEnable,
		RCC_PortF_AHB1ClockEnable
 };

