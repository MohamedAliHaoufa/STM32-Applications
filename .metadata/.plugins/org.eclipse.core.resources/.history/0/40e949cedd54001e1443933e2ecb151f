/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stdio.h>
#include "GPIO.h"
#include "GPIO.c"
#include "GPIO_reg.h"
#include "GPIO_config.h"

int main(void)
{
	// access the pointer register
	volatile RCC_CR_Register *RccControlRegister = (volatile RCC_CR_Register*) RCC_ClockControl;
	RccControlRegister->bits.HSION=1;

	volatile RCC_AHB1ENR_Register *portAClockEnableRegister = RCC_Port_AHB1ClockEnable_Registers[PortD];
	volatile GPIO_MODER_Register *portAModeSelectRegister = GPIO_ModeSelect_Registers[PortD];
	volatile GPIO_ODR_Register *portAODRControlRegister = GPIO_ODRControl_Registers[PortD];

	portAClockEnableRegister->bits.GPIODEN=0x1;

	portAModeSelectRegister->bits.MODER12 = 0x0;
	portAModeSelectRegister->bits.MODER12 = 0x1;

	portAModeSelectRegister->bits.MODER13= 0x0;
	portAModeSelectRegister->bits.MODER13= 0x1;

	portAModeSelectRegister->bits.MODER14= 0x0;
	portAModeSelectRegister->bits.MODER14= 0x1;

	portAModeSelectRegister->bits.MODER15= 0x0;
	portAModeSelectRegister->bits.MODER15= 0x1;


	portAODRControlRegister->

	while(1){

		if ((portAClockEnableRegister->bits.GPIOAEN) == 1 ){
			printf("GPIOAEN is 1 set\n");

		}else {
			printf("GPIOAEN is 0 clear\n");
		}
	}
}
