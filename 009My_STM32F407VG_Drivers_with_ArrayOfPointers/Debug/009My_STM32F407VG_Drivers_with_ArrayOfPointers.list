
009My_STM32F407VG_Drivers_with_ArrayOfPointers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002e8  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08000490  08000490  00010490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000520  08000520  00010528  2**0
                  CONTENTS
  4 .ARM          00000000  08000520  08000520  00010528  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000520  08000528  00010528  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000520  08000520  00010520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000524  08000524  00010524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010528  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010528  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00010528  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001865  00000000  00000000  00010552  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002f7  00000000  00000000  00011db7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000098  00000000  00000000  000120b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000070  00000000  00000000  00012148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000019ec  00000000  00000000  000121b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000e43  00000000  00000000  00013ba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009cb4  00000000  00000000  000149e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0001e69b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000184  00000000  00000000  0001e6ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000478 	.word	0x08000478

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000478 	.word	0x08000478

080001e8 <delay>:
/*
 * Note!! to not let high application files access the register by array of pointers use "static" keyword
 * Example: volatile RCC_AHB1ENR_Register *const RCC_Port_AHB1ClockEnable_Registers[Port_Indices]
 */

void delay(void){ // if delay is static, don't declare it in GPIO.h, and include GPIO.C in main.c
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
		int i;
		for (i=0; i<300000;i++);
 80001ee:	2300      	movs	r3, #0
 80001f0:	607b      	str	r3, [r7, #4]
 80001f2:	e002      	b.n	80001fa <delay+0x12>
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	3301      	adds	r3, #1
 80001f8:	607b      	str	r3, [r7, #4]
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4a04      	ldr	r2, [pc, #16]	; (8000210 <delay+0x28>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	ddf8      	ble.n	80001f4 <delay+0xc>
	}
 8000202:	bf00      	nop
 8000204:	bf00      	nop
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	bc80      	pop	{r7}
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	000493df 	.word	0x000493df

08000214 <GPIO_ToggleOutputPin>:
 * 
 * @param 
 * @param 
 */
Std_ReturnType GPIO_ToggleOutputPin(GPIO_PortNumIndexArr_t PortNum, GPIO_ConfigurePinNum_t PinNum)
{
 8000214:	b480      	push	{r7}
 8000216:	b085      	sub	sp, #20
 8000218:	af00      	add	r7, sp, #0
 800021a:	4603      	mov	r3, r0
 800021c:	460a      	mov	r2, r1
 800021e:	71fb      	strb	r3, [r7, #7]
 8000220:	4613      	mov	r3, r2
 8000222:	71bb      	strb	r3, [r7, #6]
    Std_ReturnType ret = E_OK;
 8000224:	2301      	movs	r3, #1
 8000226:	73fb      	strb	r3, [r7, #15]
    if((&GPIO_ODRControl_Registers[PortNum])!= NULL){
    	GPIO_ODRControl_Registers[PortNum]->Register ^= (1 << PinNum) ;
 8000228:	79fb      	ldrb	r3, [r7, #7]
 800022a:	4a0a      	ldr	r2, [pc, #40]	; (8000254 <GPIO_ToggleOutputPin+0x40>)
 800022c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000230:	681a      	ldr	r2, [r3, #0]
 8000232:	79bb      	ldrb	r3, [r7, #6]
 8000234:	2101      	movs	r1, #1
 8000236:	fa01 f303 	lsl.w	r3, r1, r3
 800023a:	4618      	mov	r0, r3
 800023c:	79fb      	ldrb	r3, [r7, #7]
 800023e:	4905      	ldr	r1, [pc, #20]	; (8000254 <GPIO_ToggleOutputPin+0x40>)
 8000240:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000244:	4042      	eors	r2, r0
 8000246:	601a      	str	r2, [r3, #0]
	}else{
		ret = E_NOT_OK;
	}
    return ret;
 8000248:	7bfb      	ldrb	r3, [r7, #15]
}
 800024a:	4618      	mov	r0, r3
 800024c:	3714      	adds	r7, #20
 800024e:	46bd      	mov	sp, r7
 8000250:	bc80      	pop	{r7}
 8000252:	4770      	bx	lr
 8000254:	08000490 	.word	0x08000490

08000258 <main>:
#include <stdint.h>
#include <stdio.h>
#include "../MCAL/GPIO/GPIO.h"

int main(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b086      	sub	sp, #24
 800025c:	af00      	add	r7, sp, #0
	// if array of pointers are static , you need to include GPIO.c
	// and if you remove static, include GPIO.h only, and extern them from GPIO.h
	// RCC_Port_AHB1ClockEnable_Registers[PortA]->Register=0x1;
	RCC_Port_ClockConfig_Register[0]->bits.MCO1= 0x01;
 800025e:	4b5a      	ldr	r3, [pc, #360]	; (80003c8 <main+0x170>)
 8000260:	681a      	ldr	r2, [r3, #0]
 8000262:	6813      	ldr	r3, [r2, #0]
 8000264:	2101      	movs	r1, #1
 8000266:	f361 5356 	bfi	r3, r1, #21, #2
 800026a:	6013      	str	r3, [r2, #0]
	RCC_Port_ClockConfig_Register[0]->bits.MCO1= 0x00;
 800026c:	4b56      	ldr	r3, [pc, #344]	; (80003c8 <main+0x170>)
 800026e:	681a      	ldr	r2, [r3, #0]
 8000270:	6813      	ldr	r3, [r2, #0]
 8000272:	f36f 5356 	bfc	r3, #21, #2
 8000276:	6013      	str	r3, [r2, #0]

	// access the pointer register
	volatile RCC_CR_Register *RccControlRegister = (volatile RCC_CR_Register*) RCC_ClockControl;
 8000278:	4b54      	ldr	r3, [pc, #336]	; (80003cc <main+0x174>)
 800027a:	613b      	str	r3, [r7, #16]
	RccControlRegister->bits.HSION= 1;
 800027c:	693a      	ldr	r2, [r7, #16]
 800027e:	6813      	ldr	r3, [r2, #0]
 8000280:	f043 0301 	orr.w	r3, r3, #1
 8000284:	6013      	str	r3, [r2, #0]

	volatile RCC_AHB1ENR_Register *portDClockEnableRegister = RCC_Port_AHB1ClockEnable_Registers[PortD];
 8000286:	4b52      	ldr	r3, [pc, #328]	; (80003d0 <main+0x178>)
 8000288:	68db      	ldr	r3, [r3, #12]
 800028a:	60fb      	str	r3, [r7, #12]
	volatile GPIO_MODER_Register *portDModeSelectRegister = GPIO_ModeSelect_Registers[PortD];
 800028c:	4b51      	ldr	r3, [pc, #324]	; (80003d4 <main+0x17c>)
 800028e:	68db      	ldr	r3, [r3, #12]
 8000290:	60bb      	str	r3, [r7, #8]
	volatile GPIO_ODR_Register *portDODRControlRegister = GPIO_ODRControl_Registers[PortD];
 8000292:	4b51      	ldr	r3, [pc, #324]	; (80003d8 <main+0x180>)
 8000294:	68db      	ldr	r3, [r3, #12]
 8000296:	607b      	str	r3, [r7, #4]

	portDClockEnableRegister->bits.GPIODEN= 0x1;
 8000298:	68fa      	ldr	r2, [r7, #12]
 800029a:	6813      	ldr	r3, [r2, #0]
 800029c:	f043 0308 	orr.w	r3, r3, #8
 80002a0:	6013      	str	r3, [r2, #0]

	portDModeSelectRegister->bits.MODER12 = 0x0;
 80002a2:	68ba      	ldr	r2, [r7, #8]
 80002a4:	6813      	ldr	r3, [r2, #0]
 80002a6:	f36f 6319 	bfc	r3, #24, #2
 80002aa:	6013      	str	r3, [r2, #0]
	portDModeSelectRegister->bits.MODER12 = 0x1;
 80002ac:	68ba      	ldr	r2, [r7, #8]
 80002ae:	6813      	ldr	r3, [r2, #0]
 80002b0:	2101      	movs	r1, #1
 80002b2:	f361 6319 	bfi	r3, r1, #24, #2
 80002b6:	6013      	str	r3, [r2, #0]

	portDModeSelectRegister->bits.MODER13= 0x0;
 80002b8:	68ba      	ldr	r2, [r7, #8]
 80002ba:	6813      	ldr	r3, [r2, #0]
 80002bc:	f36f 639b 	bfc	r3, #26, #2
 80002c0:	6013      	str	r3, [r2, #0]
	portDModeSelectRegister->bits.MODER13= 0x1;
 80002c2:	68ba      	ldr	r2, [r7, #8]
 80002c4:	6813      	ldr	r3, [r2, #0]
 80002c6:	2101      	movs	r1, #1
 80002c8:	f361 639b 	bfi	r3, r1, #26, #2
 80002cc:	6013      	str	r3, [r2, #0]

	portDModeSelectRegister->bits.MODER14= 0x0;
 80002ce:	68ba      	ldr	r2, [r7, #8]
 80002d0:	6813      	ldr	r3, [r2, #0]
 80002d2:	f36f 731d 	bfc	r3, #28, #2
 80002d6:	6013      	str	r3, [r2, #0]
	portDModeSelectRegister->bits.MODER14= 0x1;
 80002d8:	68ba      	ldr	r2, [r7, #8]
 80002da:	6813      	ldr	r3, [r2, #0]
 80002dc:	2101      	movs	r1, #1
 80002de:	f361 731d 	bfi	r3, r1, #28, #2
 80002e2:	6013      	str	r3, [r2, #0]

	portDModeSelectRegister->bits.MODER15= 0x0;
 80002e4:	68ba      	ldr	r2, [r7, #8]
 80002e6:	6813      	ldr	r3, [r2, #0]
 80002e8:	f36f 739f 	bfc	r3, #30, #2
 80002ec:	6013      	str	r3, [r2, #0]
	portDModeSelectRegister->bits.MODER15= 0x1;
 80002ee:	68ba      	ldr	r2, [r7, #8]
 80002f0:	6813      	ldr	r3, [r2, #0]
 80002f2:	2101      	movs	r1, #1
 80002f4:	f361 739f 	bfi	r3, r1, #30, #2
 80002f8:	6013      	str	r3, [r2, #0]

	while(1){
		int i;
		for(i=0;i<2;i++){
 80002fa:	2300      	movs	r3, #0
 80002fc:	617b      	str	r3, [r7, #20]
 80002fe:	e03e      	b.n	800037e <main+0x126>
		portDODRControlRegister->bits.ODR12^= 0x1;
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8000308:	b2db      	uxtb	r3, r3
 800030a:	f083 0301 	eor.w	r3, r3, #1
 800030e:	b2d9      	uxtb	r1, r3
 8000310:	687a      	ldr	r2, [r7, #4]
 8000312:	6813      	ldr	r3, [r2, #0]
 8000314:	f361 330c 	bfi	r3, r1, #12, #1
 8000318:	6013      	str	r3, [r2, #0]
		delay();
 800031a:	f7ff ff65 	bl	80001e8 <delay>
		portDODRControlRegister->bits.ODR13^= 0x1;
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	f3c3 3340 	ubfx	r3, r3, #13, #1
 8000326:	b2db      	uxtb	r3, r3
 8000328:	f083 0301 	eor.w	r3, r3, #1
 800032c:	b2d9      	uxtb	r1, r3
 800032e:	687a      	ldr	r2, [r7, #4]
 8000330:	6813      	ldr	r3, [r2, #0]
 8000332:	f361 334d 	bfi	r3, r1, #13, #1
 8000336:	6013      	str	r3, [r2, #0]
		delay();
 8000338:	f7ff ff56 	bl	80001e8 <delay>
		portDODRControlRegister->bits.ODR14^= 0x1;
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	f3c3 3380 	ubfx	r3, r3, #14, #1
 8000344:	b2db      	uxtb	r3, r3
 8000346:	f083 0301 	eor.w	r3, r3, #1
 800034a:	b2d9      	uxtb	r1, r3
 800034c:	687a      	ldr	r2, [r7, #4]
 800034e:	6813      	ldr	r3, [r2, #0]
 8000350:	f361 338e 	bfi	r3, r1, #14, #1
 8000354:	6013      	str	r3, [r2, #0]
		delay();
 8000356:	f7ff ff47 	bl	80001e8 <delay>
		portDODRControlRegister->bits.ODR15^= 0x1;
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8000362:	b2db      	uxtb	r3, r3
 8000364:	f083 0301 	eor.w	r3, r3, #1
 8000368:	b2d9      	uxtb	r1, r3
 800036a:	687a      	ldr	r2, [r7, #4]
 800036c:	6813      	ldr	r3, [r2, #0]
 800036e:	f361 33cf 	bfi	r3, r1, #15, #1
 8000372:	6013      	str	r3, [r2, #0]
		delay();
 8000374:	f7ff ff38 	bl	80001e8 <delay>
		for(i=0;i<2;i++){
 8000378:	697b      	ldr	r3, [r7, #20]
 800037a:	3301      	adds	r3, #1
 800037c:	617b      	str	r3, [r7, #20]
 800037e:	697b      	ldr	r3, [r7, #20]
 8000380:	2b01      	cmp	r3, #1
 8000382:	ddbd      	ble.n	8000300 <main+0xa8>
		}

		for(i=0;i<4;i++){
 8000384:	2300      	movs	r3, #0
 8000386:	617b      	str	r3, [r7, #20]
 8000388:	e019      	b.n	80003be <main+0x166>
		portDODRControlRegister->Register= 0x0;
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	2200      	movs	r2, #0
 800038e:	601a      	str	r2, [r3, #0]
		delay();
 8000390:	f7ff ff2a 	bl	80001e8 <delay>
		GPIO_ToggleOutputPin(PortD, 12);
 8000394:	210c      	movs	r1, #12
 8000396:	2003      	movs	r0, #3
 8000398:	f7ff ff3c 	bl	8000214 <GPIO_ToggleOutputPin>
		GPIO_ToggleOutputPin(PortD, 13);
 800039c:	210d      	movs	r1, #13
 800039e:	2003      	movs	r0, #3
 80003a0:	f7ff ff38 	bl	8000214 <GPIO_ToggleOutputPin>
		GPIO_ToggleOutputPin(PortD, 14);
 80003a4:	210e      	movs	r1, #14
 80003a6:	2003      	movs	r0, #3
 80003a8:	f7ff ff34 	bl	8000214 <GPIO_ToggleOutputPin>
		GPIO_ToggleOutputPin(PortD, 15);
 80003ac:	210f      	movs	r1, #15
 80003ae:	2003      	movs	r0, #3
 80003b0:	f7ff ff30 	bl	8000214 <GPIO_ToggleOutputPin>
		delay();
 80003b4:	f7ff ff18 	bl	80001e8 <delay>
		for(i=0;i<4;i++){
 80003b8:	697b      	ldr	r3, [r7, #20]
 80003ba:	3301      	adds	r3, #1
 80003bc:	617b      	str	r3, [r7, #20]
 80003be:	697b      	ldr	r3, [r7, #20]
 80003c0:	2b03      	cmp	r3, #3
 80003c2:	dde2      	ble.n	800038a <main+0x132>
	while(1){
 80003c4:	e799      	b.n	80002fa <main+0xa2>
 80003c6:	bf00      	nop
 80003c8:	080004fc 	.word	0x080004fc
 80003cc:	40023800 	.word	0x40023800
 80003d0:	080004d8 	.word	0x080004d8
 80003d4:	080004b4 	.word	0x080004b4
 80003d8:	08000490 	.word	0x08000490

080003dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003dc:	480d      	ldr	r0, [pc, #52]	; (8000414 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003de:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003e0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003e4:	480c      	ldr	r0, [pc, #48]	; (8000418 <LoopForever+0x6>)
  ldr r1, =_edata
 80003e6:	490d      	ldr	r1, [pc, #52]	; (800041c <LoopForever+0xa>)
  ldr r2, =_sidata
 80003e8:	4a0d      	ldr	r2, [pc, #52]	; (8000420 <LoopForever+0xe>)
  movs r3, #0
 80003ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003ec:	e002      	b.n	80003f4 <LoopCopyDataInit>

080003ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003f2:	3304      	adds	r3, #4

080003f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003f8:	d3f9      	bcc.n	80003ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003fa:	4a0a      	ldr	r2, [pc, #40]	; (8000424 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003fc:	4c0a      	ldr	r4, [pc, #40]	; (8000428 <LoopForever+0x16>)
  movs r3, #0
 80003fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000400:	e001      	b.n	8000406 <LoopFillZerobss>

08000402 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000402:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000404:	3204      	adds	r2, #4

08000406 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000406:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000408:	d3fb      	bcc.n	8000402 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800040a:	f000 f811 	bl	8000430 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800040e:	f7ff ff23 	bl	8000258 <main>

08000412 <LoopForever>:

LoopForever:
  b LoopForever
 8000412:	e7fe      	b.n	8000412 <LoopForever>
  ldr   r0, =_estack
 8000414:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000418:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800041c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000420:	08000528 	.word	0x08000528
  ldr r2, =_sbss
 8000424:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000428:	2000001c 	.word	0x2000001c

0800042c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800042c:	e7fe      	b.n	800042c <ADC_IRQHandler>
	...

08000430 <__libc_init_array>:
 8000430:	b570      	push	{r4, r5, r6, lr}
 8000432:	4d0d      	ldr	r5, [pc, #52]	; (8000468 <__libc_init_array+0x38>)
 8000434:	4c0d      	ldr	r4, [pc, #52]	; (800046c <__libc_init_array+0x3c>)
 8000436:	1b64      	subs	r4, r4, r5
 8000438:	10a4      	asrs	r4, r4, #2
 800043a:	2600      	movs	r6, #0
 800043c:	42a6      	cmp	r6, r4
 800043e:	d109      	bne.n	8000454 <__libc_init_array+0x24>
 8000440:	4d0b      	ldr	r5, [pc, #44]	; (8000470 <__libc_init_array+0x40>)
 8000442:	4c0c      	ldr	r4, [pc, #48]	; (8000474 <__libc_init_array+0x44>)
 8000444:	f000 f818 	bl	8000478 <_init>
 8000448:	1b64      	subs	r4, r4, r5
 800044a:	10a4      	asrs	r4, r4, #2
 800044c:	2600      	movs	r6, #0
 800044e:	42a6      	cmp	r6, r4
 8000450:	d105      	bne.n	800045e <__libc_init_array+0x2e>
 8000452:	bd70      	pop	{r4, r5, r6, pc}
 8000454:	f855 3b04 	ldr.w	r3, [r5], #4
 8000458:	4798      	blx	r3
 800045a:	3601      	adds	r6, #1
 800045c:	e7ee      	b.n	800043c <__libc_init_array+0xc>
 800045e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000462:	4798      	blx	r3
 8000464:	3601      	adds	r6, #1
 8000466:	e7f2      	b.n	800044e <__libc_init_array+0x1e>
 8000468:	08000520 	.word	0x08000520
 800046c:	08000520 	.word	0x08000520
 8000470:	08000520 	.word	0x08000520
 8000474:	08000524 	.word	0x08000524

08000478 <_init>:
 8000478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800047a:	bf00      	nop
 800047c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800047e:	bc08      	pop	{r3}
 8000480:	469e      	mov	lr, r3
 8000482:	4770      	bx	lr

08000484 <_fini>:
 8000484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000486:	bf00      	nop
 8000488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800048a:	bc08      	pop	{r3}
 800048c:	469e      	mov	lr, r3
 800048e:	4770      	bx	lr
