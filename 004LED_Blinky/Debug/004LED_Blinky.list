
004LED_Blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002a8  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000450  08000458  00010458  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000450  08000450  00010458  2**0
                  CONTENTS
  4 .ARM          00000000  08000450  08000450  00010458  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000450  08000458  00010458  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000450  08000450  00010450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000454  08000454  00010454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010458  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010458  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00010458  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000014b  00000000  00000000  00010482  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000000ba  00000000  00000000  000105cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000050  00000000  00000000  00010688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000038  00000000  00000000  000106d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001f9a  00000000  00000000  00010710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000006cb  00000000  00000000  000126aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000085b2  00000000  00000000  00012d75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0001b327  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000084  00000000  00000000  0001b378  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000438 	.word	0x08000438

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000438 	.word	0x08000438

080001e8 <delay>:
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

void delay(void){
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
	int i;
	for (i=0; i<300000;i++);
 80001ee:	2300      	movs	r3, #0
 80001f0:	607b      	str	r3, [r7, #4]
 80001f2:	e002      	b.n	80001fa <delay+0x12>
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	3301      	adds	r3, #1
 80001f8:	607b      	str	r3, [r7, #4]
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4a04      	ldr	r2, [pc, #16]	; (8000210 <delay+0x28>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	ddf8      	ble.n	80001f4 <delay+0xc>
}
 8000202:	bf00      	nop
 8000204:	bf00      	nop
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	bc80      	pop	{r7}
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	000493df 	.word	0x000493df

08000214 <main>:
#define GPIOD_ODR_REG_ADDR	 	(GPIOD_BASE_ADDR + GPIOD_ODR_REG_OFFSET)



int main(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b084      	sub	sp, #16
 8000218:	af00      	add	r7, sp, #0

	uint32_t *pRccAhb1enrReg = (uint32_t*) RCC_AHB1ENR_REG_ADDR;
 800021a:	4b5d      	ldr	r3, [pc, #372]	; (8000390 <main+0x17c>)
 800021c:	60bb      	str	r3, [r7, #8]
	uint32_t *GpiodModerReg = (uint32_t*) GPIOD_MODER_REG_ADDR;
 800021e:	4b5d      	ldr	r3, [pc, #372]	; (8000394 <main+0x180>)
 8000220:	607b      	str	r3, [r7, #4]
	uint32_t *GpiodOdrReg = (uint32_t*) GPIOD_ODR_REG_ADDR;
 8000222:	4b5d      	ldr	r3, [pc, #372]	; (8000398 <main+0x184>)
 8000224:	603b      	str	r3, [r7, #0]
	// Enable Clocks to GPIOD
	*pRccAhb1enrReg |= (uint32_t)(1<<3);
 8000226:	68bb      	ldr	r3, [r7, #8]
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	f043 0208 	orr.w	r2, r3, #8
 800022e:	68bb      	ldr	r3, [r7, #8]
 8000230:	601a      	str	r2, [r3, #0]


	// set the mode for GPIOD
	// GPIOD pin 12 13 14 15 General purpose output mode :
	*GpiodModerReg &= ~ (0x3<<24); // clear it first
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	601a      	str	r2, [r3, #0]
	*GpiodModerReg |= (0x01<<24);
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	601a      	str	r2, [r3, #0]

	*GpiodModerReg &= ~ (0x3<<26); // clear it first
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	601a      	str	r2, [r3, #0]
	*GpiodModerReg |= (0x01<<26);
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	601a      	str	r2, [r3, #0]

	*GpiodModerReg &= ~ (0x3<<28); // clear it first
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	601a      	str	r2, [r3, #0]
	*GpiodModerReg |= (0x01<<28);
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	601a      	str	r2, [r3, #0]

	*GpiodModerReg &= ~ (0x3<<30); // clear it first
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	601a      	str	r2, [r3, #0]
	*GpiodModerReg |= (0x01<<30);
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	601a      	str	r2, [r3, #0]


	*GpiodOdrReg &= ~ (1<<12); // clear it first
 8000292:	683b      	ldr	r3, [r7, #0]
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800029a:	683b      	ldr	r3, [r7, #0]
 800029c:	601a      	str	r2, [r3, #0]
	*GpiodOdrReg &= ~ (1<<13); // clear it first
 800029e:	683b      	ldr	r3, [r7, #0]
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80002a6:	683b      	ldr	r3, [r7, #0]
 80002a8:	601a      	str	r2, [r3, #0]
	*GpiodOdrReg &= ~ (1<<14); // clear it first
 80002aa:	683b      	ldr	r3, [r7, #0]
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80002b2:	683b      	ldr	r3, [r7, #0]
 80002b4:	601a      	str	r2, [r3, #0]
	*GpiodOdrReg &= ~ (1<<15); // clear it first
 80002b6:	683b      	ldr	r3, [r7, #0]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80002be:	683b      	ldr	r3, [r7, #0]
 80002c0:	601a      	str	r2, [r3, #0]

    /* Loop forever */
	for(;;){
		int i;
		for(i=0;i<2;i++){
 80002c2:	2300      	movs	r3, #0
 80002c4:	60fb      	str	r3, [r7, #12]
 80002c6:	e022      	b.n	800030e <main+0xfa>
		delay();
 80002c8:	f7ff ff8e 	bl	80001e8 <delay>
		*GpiodOdrReg ^= (1<<12); //toggle led in pin 12 GPIOD *
 80002cc:	683b      	ldr	r3, [r7, #0]
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	f483 5280 	eor.w	r2, r3, #4096	; 0x1000
 80002d4:	683b      	ldr	r3, [r7, #0]
 80002d6:	601a      	str	r2, [r3, #0]
		delay();
 80002d8:	f7ff ff86 	bl	80001e8 <delay>
		*GpiodOdrReg ^= (1<<13); //toggle led in pin 13 GPIOD *
 80002dc:	683b      	ldr	r3, [r7, #0]
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	f483 5200 	eor.w	r2, r3, #8192	; 0x2000
 80002e4:	683b      	ldr	r3, [r7, #0]
 80002e6:	601a      	str	r2, [r3, #0]
		delay();
 80002e8:	f7ff ff7e 	bl	80001e8 <delay>
		*GpiodOdrReg ^= (1<<14); //toggle led in pin 14 GPIOD *
 80002ec:	683b      	ldr	r3, [r7, #0]
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	f483 4280 	eor.w	r2, r3, #16384	; 0x4000
 80002f4:	683b      	ldr	r3, [r7, #0]
 80002f6:	601a      	str	r2, [r3, #0]
		delay();
 80002f8:	f7ff ff76 	bl	80001e8 <delay>
		*GpiodOdrReg ^= (1<<15); //toggle led in pin 15 GPIOD *
 80002fc:	683b      	ldr	r3, [r7, #0]
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	f483 4200 	eor.w	r2, r3, #32768	; 0x8000
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	601a      	str	r2, [r3, #0]
		for(i=0;i<2;i++){
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	3301      	adds	r3, #1
 800030c:	60fb      	str	r3, [r7, #12]
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	2b01      	cmp	r3, #1
 8000312:	ddd9      	ble.n	80002c8 <main+0xb4>
		}
		for(i=0;i<2;i++){
 8000314:	2300      	movs	r3, #0
 8000316:	60fb      	str	r3, [r7, #12]
 8000318:	e036      	b.n	8000388 <main+0x174>
	    delay();
 800031a:	f7ff ff65 	bl	80001e8 <delay>
		*GpiodOdrReg &= ~ (1<<12); //toggle led in pin 12 GPIOD *
 800031e:	683b      	ldr	r3, [r7, #0]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000326:	683b      	ldr	r3, [r7, #0]
 8000328:	601a      	str	r2, [r3, #0]
		*GpiodOdrReg &= ~ (1<<13); //toggle led in pin 13 GPIOD *
 800032a:	683b      	ldr	r3, [r7, #0]
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000332:	683b      	ldr	r3, [r7, #0]
 8000334:	601a      	str	r2, [r3, #0]
		*GpiodOdrReg &= ~ (1<<14); //toggle led in pin 14 GPIOD *
 8000336:	683b      	ldr	r3, [r7, #0]
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800033e:	683b      	ldr	r3, [r7, #0]
 8000340:	601a      	str	r2, [r3, #0]
		*GpiodOdrReg &= ~ (1<<15); //toggle led in pin 15 GPIOD *
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800034a:	683b      	ldr	r3, [r7, #0]
 800034c:	601a      	str	r2, [r3, #0]
		delay();
 800034e:	f7ff ff4b 	bl	80001e8 <delay>
		*GpiodOdrReg |= (1<<12); //toggle led in pin 12 GPIOD *
 8000352:	683b      	ldr	r3, [r7, #0]
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	601a      	str	r2, [r3, #0]
		*GpiodOdrReg |= (1<<13); //toggle led in pin 13 GPIOD *
 800035e:	683b      	ldr	r3, [r7, #0]
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000366:	683b      	ldr	r3, [r7, #0]
 8000368:	601a      	str	r2, [r3, #0]
		*GpiodOdrReg |= (1<<14); //toggle led in pin 14 GPIOD *
 800036a:	683b      	ldr	r3, [r7, #0]
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8000372:	683b      	ldr	r3, [r7, #0]
 8000374:	601a      	str	r2, [r3, #0]
		*GpiodOdrReg |= (1<<15); //toggle led in pin 15 GPIOD *
 8000376:	683b      	ldr	r3, [r7, #0]
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800037e:	683b      	ldr	r3, [r7, #0]
 8000380:	601a      	str	r2, [r3, #0]
		for(i=0;i<2;i++){
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	3301      	adds	r3, #1
 8000386:	60fb      	str	r3, [r7, #12]
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	2b01      	cmp	r3, #1
 800038c:	ddc5      	ble.n	800031a <main+0x106>
	for(;;){
 800038e:	e798      	b.n	80002c2 <main+0xae>
 8000390:	40023830 	.word	0x40023830
 8000394:	40020c00 	.word	0x40020c00
 8000398:	40020c14 	.word	0x40020c14

0800039c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800039c:	480d      	ldr	r0, [pc, #52]	; (80003d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800039e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003a0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003a4:	480c      	ldr	r0, [pc, #48]	; (80003d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80003a6:	490d      	ldr	r1, [pc, #52]	; (80003dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80003a8:	4a0d      	ldr	r2, [pc, #52]	; (80003e0 <LoopForever+0xe>)
  movs r3, #0
 80003aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003ac:	e002      	b.n	80003b4 <LoopCopyDataInit>

080003ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003b2:	3304      	adds	r3, #4

080003b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003b8:	d3f9      	bcc.n	80003ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ba:	4a0a      	ldr	r2, [pc, #40]	; (80003e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003bc:	4c0a      	ldr	r4, [pc, #40]	; (80003e8 <LoopForever+0x16>)
  movs r3, #0
 80003be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003c0:	e001      	b.n	80003c6 <LoopFillZerobss>

080003c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003c4:	3204      	adds	r2, #4

080003c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003c8:	d3fb      	bcc.n	80003c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003ca:	f000 f811 	bl	80003f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ce:	f7ff ff21 	bl	8000214 <main>

080003d2 <LoopForever>:

LoopForever:
  b LoopForever
 80003d2:	e7fe      	b.n	80003d2 <LoopForever>
  ldr   r0, =_estack
 80003d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003dc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003e0:	08000458 	.word	0x08000458
  ldr r2, =_sbss
 80003e4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003e8:	2000001c 	.word	0x2000001c

080003ec <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003ec:	e7fe      	b.n	80003ec <ADC_IRQHandler>
	...

080003f0 <__libc_init_array>:
 80003f0:	b570      	push	{r4, r5, r6, lr}
 80003f2:	4d0d      	ldr	r5, [pc, #52]	; (8000428 <__libc_init_array+0x38>)
 80003f4:	4c0d      	ldr	r4, [pc, #52]	; (800042c <__libc_init_array+0x3c>)
 80003f6:	1b64      	subs	r4, r4, r5
 80003f8:	10a4      	asrs	r4, r4, #2
 80003fa:	2600      	movs	r6, #0
 80003fc:	42a6      	cmp	r6, r4
 80003fe:	d109      	bne.n	8000414 <__libc_init_array+0x24>
 8000400:	4d0b      	ldr	r5, [pc, #44]	; (8000430 <__libc_init_array+0x40>)
 8000402:	4c0c      	ldr	r4, [pc, #48]	; (8000434 <__libc_init_array+0x44>)
 8000404:	f000 f818 	bl	8000438 <_init>
 8000408:	1b64      	subs	r4, r4, r5
 800040a:	10a4      	asrs	r4, r4, #2
 800040c:	2600      	movs	r6, #0
 800040e:	42a6      	cmp	r6, r4
 8000410:	d105      	bne.n	800041e <__libc_init_array+0x2e>
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f855 3b04 	ldr.w	r3, [r5], #4
 8000418:	4798      	blx	r3
 800041a:	3601      	adds	r6, #1
 800041c:	e7ee      	b.n	80003fc <__libc_init_array+0xc>
 800041e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000422:	4798      	blx	r3
 8000424:	3601      	adds	r6, #1
 8000426:	e7f2      	b.n	800040e <__libc_init_array+0x1e>
 8000428:	08000450 	.word	0x08000450
 800042c:	08000450 	.word	0x08000450
 8000430:	08000450 	.word	0x08000450
 8000434:	08000454 	.word	0x08000454

08000438 <_init>:
 8000438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800043a:	bf00      	nop
 800043c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800043e:	bc08      	pop	{r3}
 8000440:	469e      	mov	lr, r3
 8000442:	4770      	bx	lr

08000444 <_fini>:
 8000444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000446:	bf00      	nop
 8000448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800044a:	bc08      	pop	{r3}
 800044c:	469e      	mov	lr, r3
 800044e:	4770      	bx	lr
